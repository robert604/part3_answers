{"version":3,"sources":["services/phonebook_service.js","App.js","index.js"],"names":["baseUrl","exp","getAllPersons","axios","get","then","response","data","createPerson","item","post","deletePerson","id","url","delete","updatePerson","person","put","Person","persons","setPersons","setMessage","name","number","onClick","event","window","confirm","db","filter","p","showMessage","string","isError","Persons","filtered","map","FilterInput","filterText","filterTextChangeHandler","value","onChange","Notification","message","style","color","background","borderStyle","borderRadius","marginBottom","padding","fontSize","setTimeout","App","useState","newName","setNewName","newNumber","setNewNumber","setFilterText","useEffect","target","type","preventDefault","existingPerson","find","undefined","changedPerson","catch","error","length","respdata","concat","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98d903d5.chunk.js","sourcesContent":["import axios from 'axios'\n\n//const baseUrl = \"http://localhost:3001/api/persons\"\nconst baseUrl = \"/api/persons\"\n\nconst getAllPersons = ()=>{\n    const url = baseUrl\n    const prom = axios.get(url)\n    return prom.then(response=>response.data)\n}\n\nconst createPerson = (item)=>{\n    const url = baseUrl\n    const prom = axios.post(url,item)\n    return prom.then(response=>response.data)\n}\n\nconst deletePerson = (id)=>{\n    const url = `${baseUrl}/${id}`\n    const prom = axios.delete(url)\n    return prom\n}\n\nconst updatePerson = (person)=>{\n    const url = `${baseUrl}/${person.id}`\n    const prom = axios.put(url,person)\n    return prom\n}\n\nconst exp = {getAllPersons,createPerson,deletePerson,updatePerson}\nexport default exp","import React, { useState, useEffect } from 'react'\nimport db from \"./services/phonebook_service\"\n\nconst Person = ({person,persons,setPersons,setMessage}) => {\n  const deleteHandler = (event)=>{\n    const confirmation = window.confirm(`Confirm deletion of ${person.name}`) \n    if(confirmation) {   \n      db.deletePerson(person.id).then(response=>{\n        setPersons(persons.filter(p=>p.id!==person.id))\n        showMessage(setMessage,{string:`Deleted person: ${person.name}`,isError:false})\n      })\n    }\n  }\n  return(\n    <div>\n      {person.name} {person.number} <button onClick={deleteHandler}>delete</button>\n    </div>\n  )\n}\n\nconst Persons = ({filtered,persons,setPersons,setMessage}) => {\n  return(\n    filtered.map(person=>{\n      return(\n        <Person person={person} persons={persons} setPersons={setPersons} setMessage={setMessage} key={person.id}/>\n      )\n    })\n  )\n}\n\nconst FilterInput = ({filterText,filterTextChangeHandler})=>{\n  return(\n    <div>\n      filter shown with<input value={filterText} onChange={filterTextChangeHandler}/>\n    </div>\n  )\n}\n\nconst Notification = ({message})=>{\n  if(message===null) return null\n  else {\n    const {string,isError} = message\n    const style = {\n      color:'green',\n      background:'lightgrey',\n      borderStyle: 'solid',\n      borderRadius: '5px',\n      marginBottom: '10px',\n      padding: '10px',\n      fontSize: '20px'\n    }\n    if(isError) style.color = 'red'\n    return(\n      <div style={style}>{string}</div>\n    )\n  }\n}\n\nfunction showMessage(setMessage,message) {\n  setMessage(message)\n  setTimeout(()=>setMessage(null),5000)\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])   \n  const [ newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterText, setFilterText] = useState('')\n  const [message,setMessage] = useState(null)\n\n  function newNameChangeHandler(event) {\n    setNewName(event.target.value)\n  }\n\n  function newNumberChangeHandler(event) {\n    setNewNumber(event.target.value)\n  }\n\n  function filterTextChangeHandler(event) {\n    setFilterText(event.target.value)\n  }\n\n  function filterPersons() {\n    return persons.filter((person)=>{\n      return person.name.toLowerCase().includes(filterText.toLowerCase())\n    }\n    )\n  }\n\n  function addButtonHandler(event) {\n    event.preventDefault()\n    const existingPerson = persons.find(person=>person.name===newName)\n    if(existingPerson!==undefined) {\n      const confirmed = window.confirm(`${newName} is already added to phonebook. Replace the old number with the new one?`)\n      if(confirmed) {\n        const changedPerson = {...existingPerson,number:newNumber}\n        db.updatePerson(changedPerson).then(response=>{\n          setPersons(persons.map(person=>person.id===changedPerson.id ? response.data : person))\n          showMessage(setMessage,{string:`Updated person: ${response.data.name}`,isError:false})\n        }).catch(error=>{\n          showMessage(setMessage,{string:`Information for ${changedPerson.name} has already been removed from the server`,isError:true})\n          const data = db.getAllPersons()\n          data.then((data)=>{\n            setPersons(data)\n          })          \n        })\n      }\n    } else {\n      const person = {\n        name: newName,\n        number:newNumber,\n        id: persons.length+1\n      }\n      db.createPerson(person).then(respdata=>{\n          setPersons(persons.concat(respdata))\n          showMessage(setMessage,{string:`Added person: ${respdata.name}`,isError:false})\n      })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n  useEffect(()=>{\n    const data = db.getAllPersons()\n    data.then((data)=>{\n      setPersons(data)\n    })\n  },[])\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message}/>\n      <FilterInput filterText={filterText} filterTextChangeHandler={filterTextChangeHandler}/>\n      <form>\n        <h2>add a new</h2>\n        <div>\n          name: <input value={newName} onChange={newNameChangeHandler}/>\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={newNumberChangeHandler}/>          \n        </div>\n        <div>\n          <button type=\"submit\" onClick={addButtonHandler}>add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n        <Persons filtered={filterPersons()} persons={persons} setPersons={setPersons} setMessage={setMessage}/>\n    </div>\n  )\n}\n\nexport default App","\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import './index.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}